<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/06/26/%E5%BC%95%E5%85%A5%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6/"/>
      <url>/2024/06/26/%E5%BC%95%E5%85%A5%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="产品诉求"><a href="#产品诉求" class="headerlink" title="产品诉求"></a><strong>产品诉求</strong></h2><p>为用户的行为数据，使用路由组件将数据散列到分库分表中。</p><p>分库分表也是分布式架构中一个非常常用的数据存储方案，通常在公司中创建的系统都是直接创建出带有分库分表的系统架构。因为本身本身分库分表就是一个很成熟的方案，系统的分层和开发的熟练度都非常高。如果早期设计为单库单表的，那么后期再想扩展为分库分表则会有非常大的数据迁移和工程改造成本。</p><h2 id="功能流程"><a href="#功能流程" class="headerlink" title="功能流程"></a><strong>功能流程</strong></h2><p>在大营销的系统设计中，有一个配置库（big_market）和两个分库（big_market_01、big_market_02），我们需要对两个分库进行配置路由操作。达到分库分表的目的，而配置库则是一个单库单表存储活动等配置类信息。分库分表调用流程【如图】</p><p><img src="/images/ZSXQ_20240605_021209421.jpg" alt="ZSXQ_20240605_021209421"></p><ol><li>以用户对数据库的操作为视角，发生用户类的行为操作时【账户、下单、流水】，则会根据用户ID（userId）进行路由，把数据分配到x库y表中。</li><li>路由计算的处理，是以配置了 @DBRouter注解的 DAO 方法进行路由切面开始。通过获取用户ID（userId）值进行哈希索引计算。哈希值 &amp; 2从n次幂数量的库表 - 1 得到一个值，在根据这个值计算应该分配到哪个库表上去。比如这个是6，分库分表是2库4表，共计8个，那么6就分配到了1库4+2库2个等于6，也就得到了2库2表。</li><li>对于计算得到的分库分表值，存入到 ThreaLocal 中，这个东西的目的是可以在一个线程的调用中，可以随时获取值，而不需要通过方法传递。</li><li>最后 Spring 在执行数据库操作前，会获取路由。而路由组件则实现了动态路由，从 ThreadLocal 中获取。此外注意，因为还有分表的操作，比如 table 需要为 table_01 这个动作是由 MyBatis Plugin 插件开发实现的。</li></ol><p>此外 <strong><a href="https://bugstack.cn/md/road-map/sharding-jdbc.html">sharding-jdbc</a></strong> 也可以做分库分表，但直接使用会错过理解分库分表的核心设计，所以我们这里选择使 DB-Router 进行分库分表。</p><h2 id="工程使用"><a href="#工程使用" class="headerlink" title="工程使用"></a><strong>工程使用</strong></h2><h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a><strong>数据源配置</strong></h3><p>在 big-market-app 下，<a href="http://application-dev.yml/">application-dev.yml</a> 中，配置分库分表路由组件。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 多数据源路由配置，库数量 * 表数量 为<span class="number">2</span>的次幂，如<span class="number">2</span>库<span class="number">4</span>表</span><br><span class="line"># mysql <span class="number">5.</span>x 配置 driver-class-name: com.mysql.jdbc.Driver    mysql-connector-java <span class="number">5.1</span><span class="number">.34</span></span><br><span class="line"># mysql <span class="number">8.</span>x 配置 driver-class-name: com.mysql.cj.jdbc.Driver mysql-connector-java <span class="number">8.0</span><span class="number">.22</span></span><br><span class="line">mini-db-router:</span><br><span class="line">  jdbc:</span><br><span class="line">    datasource:</span><br><span class="line">      dbCount: <span class="number">2</span></span><br><span class="line">      tbCount: <span class="number">4</span></span><br><span class="line">      <span class="keyword">default</span>: db00</span><br><span class="line">      routerKey: userId</span><br><span class="line">      list: db01,db02</span><br><span class="line">      db00:</span><br><span class="line">        driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:<span class="comment">//127.0.0.1:3306/big_market?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=UTC&amp;useSSL=true</span></span><br><span class="line">        username: root</span><br><span class="line">        password: <span class="number">123456</span></span><br><span class="line">        type-class-name: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">        pool:</span><br><span class="line">          pool-name: Retail_HikariCP</span><br><span class="line">          minimum-idle: <span class="number">15</span> #最小空闲连接数量</span><br><span class="line">          idle-timeout: <span class="number">180000</span> #空闲连接存活最大时间，默认<span class="number">600000</span>（<span class="number">10</span>分钟）</span><br><span class="line">          maximum-pool-size: <span class="number">25</span> #连接池最大连接数，默认是<span class="number">10</span></span><br><span class="line">          auto-commit: <span class="literal">true</span>  #此属性控制从池返回的连接的默认自动提交行为,默认值：<span class="literal">true</span></span><br><span class="line">          max-lifetime: <span class="number">1800000</span> #此属性控制池中连接的最长生命周期，值<span class="number">0</span>表示无限生命周期，默认<span class="number">1800000</span>即<span class="number">30</span>分钟</span><br><span class="line">          connection-timeout: <span class="number">30000</span> #数据库连接超时时间,默认<span class="number">30</span>秒，即<span class="number">30000</span></span><br><span class="line">          connection-test-query: SELECT <span class="number">1</span></span><br><span class="line">      db01:</span><br><span class="line">        driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:<span class="comment">//127.0.0.1:3306/big_market_01?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=UTC&amp;useSSL=true</span></span><br><span class="line">        username: root</span><br><span class="line">        password: <span class="number">123456</span></span><br><span class="line">        type-class-name: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">        pool:</span><br><span class="line">          pool-name: Retail_HikariCP</span><br><span class="line">          minimum-idle: <span class="number">15</span> #最小空闲连接数量</span><br><span class="line">          idle-timeout: <span class="number">180000</span> #空闲连接存活最大时间，默认<span class="number">600000</span>（<span class="number">10</span>分钟）</span><br><span class="line">          maximum-pool-size: <span class="number">25</span> #连接池最大连接数，默认是<span class="number">10</span></span><br><span class="line">          auto-commit: <span class="literal">true</span>  #此属性控制从池返回的连接的默认自动提交行为,默认值：<span class="literal">true</span></span><br><span class="line">          max-lifetime: <span class="number">1800000</span> #此属性控制池中连接的最长生命周期，值<span class="number">0</span>表示无限生命周期，默认<span class="number">1800000</span>即<span class="number">30</span>分钟</span><br><span class="line">          connection-timeout: <span class="number">30000</span> #数据库连接超时时间,默认<span class="number">30</span>秒，即<span class="number">30000</span></span><br><span class="line">          connection-test-query: SELECT <span class="number">1</span></span><br><span class="line">      db02:</span><br><span class="line">        driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:<span class="comment">//127.0.0.1:3306/big_market_02?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=UTC&amp;useSSL=true</span></span><br><span class="line">        username: root</span><br><span class="line">        password: <span class="number">123456</span></span><br><span class="line">        type-class-name: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">        pool:</span><br><span class="line">          pool-name: Retail_HikariCP</span><br><span class="line">          minimum-idle: <span class="number">15</span> #最小空闲连接数量</span><br><span class="line">          idle-timeout: <span class="number">180000</span> #空闲连接存活最大时间，默认<span class="number">600000</span>（<span class="number">10</span>分钟）</span><br><span class="line">          maximum-pool-size: <span class="number">25</span> #连接池最大连接数，默认是<span class="number">10</span></span><br><span class="line">          auto-commit: <span class="literal">true</span>  #此属性控制从池返回的连接的默认自动提交行为,默认值：<span class="literal">true</span></span><br><span class="line">          max-lifetime: <span class="number">1800000</span> #此属性控制池中连接的最长生命周期，值<span class="number">0</span>表示无限生命周期，默认<span class="number">1800000</span>即<span class="number">30</span>分钟</span><br><span class="line">          connection-timeout: <span class="number">30000</span> #数据库连接超时时间,默认<span class="number">30</span>秒，即<span class="number">30000</span></span><br><span class="line">          connection-test-query: SELECT <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>dbCount 分几个库，tbCount 分几个表，两个数的乘积为2的次幂。</li><li>default 为默认不走分库分表时候路由到哪个库，这里是我们需要的配置库。</li><li>routerKey 默认走的路由 Key，一个数据路由，是需要有一个键的，这里选择的是用户ID作为路由计算键。</li><li>list: db01,db02 表示分库分表，走那套库。</li><li>db0、db1、db2 就是配置的数据库信息了。这里给每个数据库都配置了对应的连接池信息。</li></ul><h3 id="库表使用（路由）"><a href="#库表使用（路由）" class="headerlink" title="库表使用（路由）"></a><strong>库表使用（路由）</strong></h3><p>在 big-market-infrastructure 基础层，配置路由操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@DBRouterStrategy(splitTable = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRaffleActivityOrderDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DBRouter(key = &quot;userId&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(RaffleActivityOrder raffleActivityOrder)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DBRouter</span></span><br><span class="line">    List&lt;RaffleActivityOrder&gt; <span class="title function_">queryRaffleActivityOrderByUserId</span><span class="params">(String userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码</strong>：cn.bugstack.infrastructure.persistent.dao.IRaffleActivityOrderDao</p><ul><li>@DBRouterStrategy(splitTable &#x3D; true) 作用是执行 MyBaits 操作的时候，对 SQL 语句进行动态变更。</li><li>@DBRouter 指定对哪个SQL的操作进行路由。默认路由字段就是 userId 你可以配置也可以不配置。</li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="不分库表"><a href="#不分库表" class="headerlink" title="不分库表"></a>不分库表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RaffleActivityDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IRaffleActivityDao raffleActivityDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_queryRaffleActivityByActivityId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RaffleActivity</span> <span class="variable">raffleActivity</span> <span class="operator">=</span> raffleActivityDao.queryRaffleActivityByActivityId(<span class="number">100301L</span>);</span><br><span class="line">        log.info(<span class="string">&quot;测试结果：&#123;&#125;&quot;</span>, JSON.toJSONString(raffleActivity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个测试验证，通过使用分库分表路由组件后，原有的查询是否还生效。</p><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a><strong>分库分表</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RaffleActivityOrderDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IRaffleActivityOrderDao raffleActivityOrderDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_insert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RaffleActivityOrder</span> <span class="variable">raffleActivityOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RaffleActivityOrder</span>();</span><br><span class="line">        raffleActivityOrder.setUserId(<span class="string">&quot;xiaofuge&quot;</span>);</span><br><span class="line">        raffleActivityOrder.setActivityId(<span class="number">100301L</span>);</span><br><span class="line">        raffleActivityOrder.setActivityName(<span class="string">&quot;测试活动&quot;</span>);</span><br><span class="line">        raffleActivityOrder.setStrategyId(<span class="number">100006L</span>);</span><br><span class="line">        raffleActivityOrder.setOrderId(RandomStringUtils.randomNumeric(<span class="number">12</span>));</span><br><span class="line">        raffleActivityOrder.setOrderTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        raffleActivityOrder.setState(<span class="string">&quot;not_used&quot;</span>);</span><br><span class="line">        <span class="comment">// 插入数据</span></span><br><span class="line">        raffleActivityOrderDao.insert(raffleActivityOrder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_queryRaffleActivityOrderByUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="string">&quot;xiaofuge&quot;</span>;</span><br><span class="line">        List&lt;RaffleActivityOrder&gt; raffleActivityOrders = raffleActivityOrderDao.queryRaffleActivityOrderByUserId(userId);</span><br><span class="line">        log.info(<span class="string">&quot;测试结果：&#123;&#125;&quot;</span>, JSON.toJSONString(raffleActivityOrders));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/ZSXQ_20240605_023012936.jpg" alt="ZSXQ_20240605_023012936"></p><ol><li>插入订单和查询订单的分库分表测试，数据会路由到1库的001表。</li><li>测试完，可以看到数据已经进入到对应的库表了，符合预期。你还可以做一些其他的操作</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/25/hello-world/"/>
      <url>/2024/06/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
